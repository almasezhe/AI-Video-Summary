from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import os
import openai
import yt_dlp
import whisper
from pytube import YouTube
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def download_audio(youtube_url, filename="audio"):
    print(f"[1/5] üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å {youtube_url}")
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': filename,  # –ë–ï–ó .mp3 –∑–¥–µ—Å—å!!!
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(youtube_url, download=True)
    print(f"[2/5] ‚úÖ –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ: {filename}.mp3")
    return info_dict.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')



def transcribe_audio(audio_path):
    print(f"[3/5] üéß –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ: {audio_path}")
    model = whisper.load_model("small")
    result = model.transcribe(audio_path)
    print(f"[4/5] ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤)")
    return result["text"]

def analyze_text(text):
    print("[5/5] üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ OpenAI –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
    max_chars = 3000
    if len(text) > max_chars:
        print(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ {max_chars} —Å–∏–º–≤–æ–ª–æ–≤. –ë—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω.")
        text = text[:max_chars]

    prompt = f"""
    –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ:
    {text}

    –ù—É–∂–Ω–æ:
    - 5-7 –∫–æ—Ä–æ—Ç–∫–∏—Ö –±—É–ª–ª–µ—Ç–ø–æ–∏–Ω—Ç–æ–≤ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
    - –ì–ª–∞–≤–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
    - –û–±—â–µ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
    –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω.")
    return response['choices'][0]['message']['content']

def get_video_title(youtube_url):
    print("üé¨ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
    yt = YouTube(youtube_url)
    title = yt.title
    print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {title}")
    return title

@app.post("/analyze")
async def analyze(request: Request):
    body = await request.json()
    youtube_url = body["youtube_url"]

    print("\n========== –ù–æ–≤—ã–π –ó–∞–ø—Ä–æ—Å ==========")
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {youtube_url}")

    try:
        title = download_audio(youtube_url)  # <-- —Ç—É—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º title —Å—Ä–∞–∑—É
        print(f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {title}")

        transcript = transcribe_audio("audio.mp3")

        if not transcript.strip() or len(transcript.strip()) < 20:
            print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è.")
            return {"result": "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é. –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø—É—Å—Ç–æ–µ –∏–ª–∏ –±–∏—Ç–æ–µ."}

        analysis = analyze_text(transcript)
        result_text = f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {title}\n\n{analysis}"

        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return {"result": result_text}

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
        return {"result": f"–û—à–∏–±–∫–∞: {str(e)}"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
